#Draws the data gotten from Driver_NoiseTest

import numpy as np

import Simulator as sim
import Solver as solve
import Draw as dr
import NetworkGame as net
import Rules as rules
import JSONExport as jse
import time
import random as ran
import matplotlib.pyplot as plt

defender_nonblocky = [1.002099344633637, 1.0156724456958457, 1.0322374851898661, 1.05036956839739, 1.0553337177385917, 1.07120248251363, 1.0835949808432865, 1.1005362470192017, 1.1106279744865009, 1.1058434265703665, 1.123236675479508, 1.1194182300157514, 1.1305101075989474, 1.128540450264321, 1.1364735558644585, 1.135900703925736, 1.144481566324339, 1.1388109279650998, 1.1360130612153518, 1.1386883563764278, 1.1404801146691625]
attacker_blocky = [1.00105663493834, 0.9637208183140034, 0.9421592841984374, 0.9025907920387831, 0.8808973232270776, 0.9059972607739494, 0.8765622044694059, 0.8733591705237712, 0.8668237215111261, 0.8448851095220773, 0.8407457648296452, 0.8111515356981464, 0.8030379774813536, 0.8010708737214913, 0.7894138049238648, 0.7705360778852552, 0.7732105218547435, 0.772722789074821, 0.756685488365359, 0.754564318928069, 0.7702730596845638]
attacker_nonblocky = [0.9946880194769423, 0.9597746941120467, 0.930072363648872, 0.9026546314078829, 0.8765936985581623, 0.8724764848470179, 0.846352563819785, 0.8392612867001775, 0.8198098565312574, 0.8236342603361304, 0.814718028451856, 0.8079816982244433, 0.806714273949915, 0.7983640844716592, 0.7922269931221966, 0.8081434246261628, 0.8032226860559489, 0.8041028181579386, 0.7977478217619488, 0.8042253897466101, 0.8013015466418385]
defender_blocky = [1.0059671592094976, 1.0204467793129242, 1.0422457958815414, 1.046880534078188, 1.0656331359533622, 1.0777421874842152, 1.0846649286693995, 1.0996195136789282, 1.1137365261658678, 1.1236171581193433, 1.1406673768185223, 1.131745186593132, 1.1385632312129925, 1.1427374747605323, 1.1478871838679172, 1.1490320365537743, 1.1452561506694172, 1.1581065900734158, 1.1553674555432398, 1.1594310441843403, 1.1599596341604865]
defender_nonblocky = [1.002099344633637, 1.0156724456958457, 1.0322374851898661, 1.05036956839739, 1.0553337177385917, 1.07120248251363, 1.0835949808432865, 1.1005362470192017, 1.1106279744865009, 1.1058434265703665, 1.123236675479508, 1.1194182300157514, 1.1305101075989474, 1.128540450264321, 1.1364735558644585, 1.135900703925736, 1.144481566324339, 1.1388109279650998, 1.1360130612153518, 1.1386883563764278, 1.1404801146691625]

plt.legend(bbox_to_anchor=(1.04,1), loc="upper left")

plt.plot(list(np.arange(0, 1.05, 0.05)), attacker_blocky, color="red", label="Attacker Deterministic Noise")
plt.plot(list(np.arange(0, 1.05, 0.05)), attacker_nonblocky, color="red", linestyle="dashed", label="Attacker Nondeterministic Noise")

plt.plot(list(np.arange(0, 1.05, 0.05)), defender_blocky, color="blue", label="Defender Deterministic Noise")
plt.plot(list(np.arange(0, 1.05, 0.05)), defender_nonblocky, color="blue", linestyle="dashed", label="Defender Nondeterministic Noise")

plt.xlabel("Noise Level")
plt.ylabel("Actual to Expected")

plt.tight_layout()

plt.legend(fancybox=True, shadow=True)

plt.savefig('noise.png', transparent=True)